// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package medcon

import (
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// MedconABI is the input ABI used to generate the binding from.
const MedconABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"patient\",\"type\":\"string\"},{\"name\":\"indx\",\"type\":\"uint64\"}],\"name\":\"showNumOfMedOrdersByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"isExistingUser\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"patient\",\"type\":\"string\"},{\"name\":\"doctor\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"showMedOrderByDoctor\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patient\",\"type\":\"string\"},{\"name\":\"doctor\",\"type\":\"string\"},{\"name\":\"pharma\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"markMedOrderAsMet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"patient\",\"type\":\"string\"},{\"name\":\"doctor\",\"type\":\"string\"}],\"name\":\"showNumOfMedOrdersByDoc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"patient\",\"type\":\"string\"}],\"name\":\"showNumOfPrescriptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patient\",\"type\":\"string\"},{\"name\":\"med_name\",\"type\":\"string\"},{\"name\":\"dose_per_day\",\"type\":\"uint64\"},{\"name\":\"no_of_days\",\"type\":\"uint64\"},{\"name\":\"doctor\",\"type\":\"string\"},{\"name\":\"diagnosis\",\"type\":\"string\"}],\"name\":\"addMedOrderToPatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"uint64\"},{\"name\":\"pharma_id\",\"type\":\"string\"}],\"name\":\"addPharma\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"isPharma\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"patient\",\"type\":\"string\"},{\"name\":\"pres\",\"type\":\"uint64\"},{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"showMedOrderByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"isDoctor\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"isPatient\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"patient\",\"type\":\"string\"}],\"name\":\"showPatientDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"uint64\"}],\"name\":\"addPatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"uint64\"},{\"name\":\"medical_id\",\"type\":\"string\"}],\"name\":\"addDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"

// MedconBin is the compiled bytecode used for deploying new contracts.
const MedconBin = `0x6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a031990911617905561291f8061003b6000396000f3006060604052600436106100e55763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663195451c881146100ea5780632bbfb0ba1461016457806341b53c88146101c957806341c0e1b5146104405780635d37ec16146104555780636196d53b14610536578063632047c0146105c9578063693482151461061a578063774b4a371461074a5780637dd22a15146108325780637ff0539c1461088357806395122c52146108e7578063b6630c0d14610938578063d19bc23c14610989578063d31a1dfc14610abb578063f790812d14610b5a575b600080fd5b34156100f557600080fd5b61014760046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923567ffffffffffffffff169250610c42915050565b60405167ffffffffffffffff909116815260200160405180910390f35b341561016f57600080fd5b6101b560046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610cf895505050505050565b604051901515815260200160405180910390f35b34156101d457600080fd5b61026860046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050923567ffffffffffffffff169250610d7c915050565b60405167ffffffffffffffff80871660408301528516606082015282151560a082015260e080825281906020820190608083019060c084019084018c818151815260200191508051906020019080838360005b838110156102d35780820151838201526020016102bb565b50505050905090810190601f1680156103005780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b8381101561033657808201518382015260200161031e565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b83811015610399578082015183820152602001610381565b50505050905090810190601f1680156103c65780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156103fc5780820151838201526020016103e4565b50505050905090810190601f1680156104295780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b341561044b57600080fd5b610453611198565b005b341561046057600080fd5b61045360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050923567ffffffffffffffff1692506111d9915050565b341561054157600080fd5b61014760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061135f95505050505050565b34156105d457600080fd5b61014760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061146295505050505050565b341561062557600080fd5b61045360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949667ffffffffffffffff87358116976020808201359092169750919550606082019450604091820135860180820194503592508291601f830182900482029091019051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506114e095505050505050565b341561075557600080fd5b61045360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803567ffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506119cd95505050505050565b341561083d57600080fd5b6101b560046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611c4595505050505050565b341561088e57600080fd5b61026860046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505067ffffffffffffffff853581169560200135169350611ce092505050565b34156108f257600080fd5b6101b560046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611dfd95505050505050565b341561094357600080fd5b6101b560046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611e4795505050505050565b341561099457600080fd5b6109da60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611ee695505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610a1b578082015183820152602001610a03565b50505050905090810190601f168015610a485780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610a7e578082015183820152602001610a66565b50505050905090810190601f168015610aab5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3415610ac657600080fd5b61045360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050923567ffffffffffffffff16925061211b915050565b3415610b6557600080fd5b61045360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803567ffffffffffffffff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061239b95505050505050565b60008060006002856040518082805190602001908083835b60208310610c795780518252601f199092019160209182019101610c5a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600281015490925067ffffffffffffffff9081169085161115610ccf57600080fd5b5067ffffffffffffffff9283166000908152602091909152604090206001015490911692915050565b60006003826040518082805190602001908083835b60208310610d2c5780518252601f199092019160209182019101610d0d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600201546901000000000000000000900460ff1690505b919050565b610d84612694565b610d8c612694565b600080610d97612694565b6000610da1612694565b600080600060028d6040518082805190602001908083835b60208310610dd85780518252601f199092019160209182019101610db9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390209250826000600182018e6040518082805190602001908083835b60208310610e455780518252601f199092019160209182019101610e26565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205467ffffffffffffffff9081168252602082019290925260400160002060018101549093508116908c1610610ead57600080fd5b5067ffffffffffffffff8a811660009081526020838152604091829020600280820154600483015483549396879660018089019785841697680100000000000000009096049093169560038a01956101009586900460ff169560058c01958c9594831615909102600019019091169190910491601f8301829004820290910190519081016040528092919081815260200182805460018160011615610100020316600290048015610f9f5780601f10610f7457610100808354040283529160200191610f9f565b820191906000526020600020905b815481529060010190602001808311610f8257829003601f168201915b50505050509650858054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103b5780601f106110105761010080835404028352916020019161103b565b820191906000526020600020905b81548152906001019060200180831161101e57829003601f168201915b50505050509550828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110d75780601f106110ac576101008083540402835291602001916110d7565b820191906000526020600020905b8154815290600101906020018083116110ba57829003601f168201915b50505050509250808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111735780601f1061114857610100808354040283529160200191611173565b820191906000526020600020905b81548152906001019060200180831161115657829003601f168201915b5050505050905099509950995099509950995099505050509397509397509397909450565b6000543373ffffffffffffffffffffffffffffffffffffffff908116911614156111d75760005473ffffffffffffffffffffffffffffffffffffffff16ff5b565b60008060006002876040518082805190602001908083835b602083106112105780518252601f1990920191602091820191016111f1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600281015490935068010000000000000000900460ff16151561126657600080fd5b82600060018201886040518082805190602001908083835b6020831061129d5780518252601f19909201916020918201910161127e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205467ffffffffffffffff1681526020810191909152604001600020600381015490925060ff16151561130257600080fd5b5067ffffffffffffffff83166000908152602082905260409020600481015460ff16151561132f57600080fd5b60048101805461ff001916610100179055600581018580516113559291602001906126a6565b5050505050505050565b60008060006002856040518082805190602001908083835b602083106113965780518252601f199092019160209182019101611377565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020915081600060018201866040518082805190602001908083835b602083106114035780518252601f1990920191602091820191016113e4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205467ffffffffffffffff90811682526020820192909252604001600020600101541695945050505050565b6000806002836040518082805190602001908083835b602083106114975780518252601f199092019160209182019101611478565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390206002015467ffffffffffffffff169392505050565b6114e8612720565b6000806114f8888888888861258d565b92506002896040518082805190602001908083835b6020831061152c5780518252601f19909201916020918201910161150d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020915081600101856040518082805190602001908083835b602083106115955780518252601f199092019160209182019101611576565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205467ffffffffffffffff16151561168e5760028201805467ffffffffffffffff198116600167ffffffffffffffff928316810192831691909117909255908301866040518082805190602001908083835b602083106116395780518252601f19909201916020918201910161161a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b81600060018201876040518082805190602001908083835b602083106116c55780518252601f1990920191602091820191016116a6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205467ffffffffffffffff16815260208101919091526040016000206003015460ff16151561180d5761172a856125d2565b82600060018201886040518082805190602001908083835b602083106117615780518252601f199092019160209182019101611742565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205467ffffffffffffffff1681526020810191909152604001600020815160018201805467ffffffffffffffff191667ffffffffffffffff929092169190911790556020820151816002019080516117f09291602001906126a6565b506040820151600391909101805460ff1916911515919091179055505b81600060018201876040518082805190602001908083835b602083106118445780518252601f199092019160209182019101611825565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205467ffffffffffffffff9081168252602080830193909352604091820160009081206001808201805467ffffffffffffffff1981169086169283019095169490941790935591815292819052912090915083908151819080516118df9291602001906126a6565b506020820151816001019080516118fa9291602001906126a6565b50604082015160028201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560608201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160030190805161196d9291602001906126a6565b5060a082015160048201805460ff191691151591909117905560c08201516004820180549115156101000261ff001990921691909117905560e0820151816005019080516119bf9291602001906126a6565b505050505050505050505050565b6003846040518082805190602001908083835b602083106119ff5780518252601f1990920191602091820191016119e0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600201546901000000000000000000900460ff16151560011415611a5657600080fd5b611a6383858460036125f9565b6003856040518082805190602001908083835b60208310611a955780518252601f199092019160209182019101611a76565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020815181908051611add9291602001906126a6565b50602082015181600101908051611af89291602001906126a6565b50604082015160028201805467ffffffffffffffff191667ffffffffffffffff92909216919091179055606082015160028201805468ff0000000000000000191668010000000000000000836003811115611b4f57fe5b021790555060808201516002909101805491151569010000000000000000000269ff0000000000000000001990921691909117905550611b8e81612653565b6004856040518082805190602001908083835b60208310611bc05780518252601f199092019160209182019101611ba1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020815181908051611c089291602001906126a6565b50602082015181600101908051611c2392916020019061277d565b506040820151600291909101805460ff19169115159190911790555050505050565b6000611c5082610cf8565b1515611c5e57506000610d77565b6004826040518082805190602001908083835b60208310611c905780518252601f199092019160209182019101611c71565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390206002015460ff1615611cd857506001610d77565b506000919050565b611ce8612694565b611cf0612694565b600080611cfb612694565b6000611d05612694565b600080600060028d6040518082805190602001908083835b60208310611d3c5780518252601f199092019160209182019101611d1d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600281015490935068010000000000000000900460ff161515611d9257600080fd5b600283015467ffffffffffffffff808e1691161015611db057600080fd5b67ffffffffffffffff8c166000908152602084905260409020600381015490925060ff161515611ddf57600080fd5b600182015467ffffffffffffffff908116908c1610610ead57600080fd5b6000611e0882610cf8565b1515611e1657506000610d77565b60018260405180828051906020019080838360208310611c905780518252601f199092019160209182019101611c71565b6000611e5282610cf8565b1515611e6057506000610d77565b6002826040518082805190602001908083835b60208310611e925780518252601f199092019160209182019101611e73565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390206002015468010000000000000000900460ff1615611cd857506001610d77565b611eee612694565b611ef6612694565b611eff83611e47565b1515611f0a57600080fd5b6003836040518082805190602001908083835b60208310611f3c5780518252601f199092019160209182019101611f1d565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016003846040518082805190602001908083835b60208310611fa45780518252601f199092019160209182019101611f85565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561206f5780601f106120445761010080835404028352916020019161206f565b820191906000526020600020905b81548152906001019060200180831161205257829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561210b5780601f106120e05761010080835404028352916020019161210b565b820191906000526020600020905b8154815290600101906020018083116120ee57829003601f168201915b5050505050905091509150915091565b6003836040518082805190602001908083835b6020831061214d5780518252601f19909201916020918201910161212e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600201546901000000000000000000900460ff161515600114156121a457600080fd5b6121b182848360016125f9565b6003846040518082805190602001908083835b602083106121e35780518252601f1990920191602091820191016121c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902081518190805161222b9291602001906126a6565b506020820151816001019080516122469291602001906126a6565b50604082015160028201805467ffffffffffffffff191667ffffffffffffffff92909216919091179055606082015160028201805468ff000000000000000019166801000000000000000083600381111561229d57fe5b021790555060808201516002909101805491151569010000000000000000000269ff00000000000000000019909216919091179055506122db612671565b6002846040518082805190602001908083835b6020831061230d5780518252601f1990920191602091820191016122ee565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020815160028201805467ffffffffffffffff191667ffffffffffffffff92909216919091179055602082015160029091018054911515680100000000000000000268ff00000000000000001990921691909117905550505050565b6003846040518082805190602001908083835b602083106123cd5780518252601f1990920191602091820191016123ae565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600201546901000000000000000000900460ff1615156001141561242457600080fd5b61243183858460006125f9565b6003856040518082805190602001908083835b602083106124635780518252601f199092019160209182019101612444565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390208151819080516124ab9291602001906126a6565b506020820151816001019080516124c69291602001906126a6565b50604082015160028201805467ffffffffffffffff191667ffffffffffffffff92909216919091179055606082015160028201805468ff000000000000000019166801000000000000000083600381111561251d57fe5b021790555060808201516002909101805491151569010000000000000000000269ff000000000000000000199092169190911790555061255c81612653565b60018560405180828051906020019080838360208310611bc05780518252601f199092019160209182019101611ba1565b612595612720565b61259d612720565b9586525067ffffffffffffffff938416604086015291909216606084015260808301919091526020820152600160a082015290565b6125da6127d5565b6125e26127d5565b602081019290925250600081526001604082015290565b6126016127fd565b6126096127fd565b8481526020810186905267ffffffffffffffff841660408201526060810183600381111561263357fe5b9081600381111561264057fe5b9052506001608082015295945050505050565b61265b612834565b612663612834565b918252506001604082015290565b612679612855565b612681612855565b60016020820152600081529050805b5090565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126e757805160ff1916838001178555612714565b82800160010185558215612714579182015b828111156127145782518255916020019190600101906126f9565b5061269092915061286c565b61010060405190810160405280612735612694565b8152602001612742612694565b8152600060208201819052604082015260600161275d612694565b81526000602082018190526040820152606001612778612694565b905290565b8280548282559060005260206000209081019282156127c9579160200282015b828111156127c9578251829080516127b99291602001906126a6565b509160200191906001019061279d565b50612690929150612889565b606060405190810160405260008152602081016127f0612694565b8152600060209091015290565b60a060405190810160405280612811612694565b815260200161281e612694565b81526000602082018190526040909101906127f0565b606060405190810160405280612848612694565b81526020016127f0612694565b604080519081016040526000808252602082015290565b61288691905b808211156126905760008155600101612872565b90565b61288691905b808211156126905760006128a382826128ac565b5060010161288f565b50805460018160011615610100020316600290046000825580601f106128d257506128f0565b601f0160209004906000526020600020908101906128f0919061286c565b505600a165627a7a72305820eedb09becbffa1156204d66a140eb6a2071a57d8734a9b527765fbb4a06cd2210029`

// DeployMedcon deploys a new Ethereum contract, binding an instance of Medcon to it.
func DeployMedcon(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Medcon, error) {
	parsed, err := abi.JSON(strings.NewReader(MedconABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MedconBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Medcon{MedconCaller: MedconCaller{contract: contract}, MedconTransactor: MedconTransactor{contract: contract}}, nil
}

// Medcon is an auto generated Go binding around an Ethereum contract.
type Medcon struct {
	MedconCaller     // Read-only binding to the contract
	MedconTransactor // Write-only binding to the contract
}

// MedconCaller is an auto generated read-only Go binding around an Ethereum contract.
type MedconCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MedconTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MedconTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MedconSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MedconSession struct {
	Contract     *Medcon           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MedconCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MedconCallerSession struct {
	Contract *MedconCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MedconTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MedconTransactorSession struct {
	Contract     *MedconTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MedconRaw is an auto generated low-level Go binding around an Ethereum contract.
type MedconRaw struct {
	Contract *Medcon // Generic contract binding to access the raw methods on
}

// MedconCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MedconCallerRaw struct {
	Contract *MedconCaller // Generic read-only contract binding to access the raw methods on
}

// MedconTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MedconTransactorRaw struct {
	Contract *MedconTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMedcon creates a new instance of Medcon, bound to a specific deployed contract.
func NewMedcon(address common.Address, backend bind.ContractBackend) (*Medcon, error) {
	contract, err := bindMedcon(address, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Medcon{MedconCaller: MedconCaller{contract: contract}, MedconTransactor: MedconTransactor{contract: contract}}, nil
}

// NewMedconCaller creates a new read-only instance of Medcon, bound to a specific deployed contract.
func NewMedconCaller(address common.Address, caller bind.ContractCaller) (*MedconCaller, error) {
	contract, err := bindMedcon(address, caller, nil)
	if err != nil {
		return nil, err
	}
	return &MedconCaller{contract: contract}, nil
}

// NewMedconTransactor creates a new write-only instance of Medcon, bound to a specific deployed contract.
func NewMedconTransactor(address common.Address, transactor bind.ContractTransactor) (*MedconTransactor, error) {
	contract, err := bindMedcon(address, nil, transactor)
	if err != nil {
		return nil, err
	}
	return &MedconTransactor{contract: contract}, nil
}

// bindMedcon binds a generic wrapper to an already deployed contract.
func bindMedcon(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MedconABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Medcon *MedconRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Medcon.Contract.MedconCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Medcon *MedconRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Medcon.Contract.MedconTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Medcon *MedconRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Medcon.Contract.MedconTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Medcon *MedconCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Medcon.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Medcon *MedconTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Medcon.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Medcon *MedconTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Medcon.Contract.contract.Transact(opts, method, params...)
}

// IsDoctor is a free data retrieval call binding the contract method 0x95122c52.
//
// Solidity: function isDoctor(username string) constant returns(res bool)
func (_Medcon *MedconCaller) IsDoctor(opts *bind.CallOpts, username string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Medcon.contract.Call(opts, out, "isDoctor", username)
	return *ret0, err
}

// IsDoctor is a free data retrieval call binding the contract method 0x95122c52.
//
// Solidity: function isDoctor(username string) constant returns(res bool)
func (_Medcon *MedconSession) IsDoctor(username string) (bool, error) {
	return _Medcon.Contract.IsDoctor(&_Medcon.CallOpts, username)
}

// IsDoctor is a free data retrieval call binding the contract method 0x95122c52.
//
// Solidity: function isDoctor(username string) constant returns(res bool)
func (_Medcon *MedconCallerSession) IsDoctor(username string) (bool, error) {
	return _Medcon.Contract.IsDoctor(&_Medcon.CallOpts, username)
}

// IsExistingUser is a free data retrieval call binding the contract method 0x2bbfb0ba.
//
// Solidity: function isExistingUser(username string) constant returns(res bool)
func (_Medcon *MedconCaller) IsExistingUser(opts *bind.CallOpts, username string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Medcon.contract.Call(opts, out, "isExistingUser", username)
	return *ret0, err
}

// IsExistingUser is a free data retrieval call binding the contract method 0x2bbfb0ba.
//
// Solidity: function isExistingUser(username string) constant returns(res bool)
func (_Medcon *MedconSession) IsExistingUser(username string) (bool, error) {
	return _Medcon.Contract.IsExistingUser(&_Medcon.CallOpts, username)
}

// IsExistingUser is a free data retrieval call binding the contract method 0x2bbfb0ba.
//
// Solidity: function isExistingUser(username string) constant returns(res bool)
func (_Medcon *MedconCallerSession) IsExistingUser(username string) (bool, error) {
	return _Medcon.Contract.IsExistingUser(&_Medcon.CallOpts, username)
}

// IsPatient is a free data retrieval call binding the contract method 0xb6630c0d.
//
// Solidity: function isPatient(username string) constant returns(res bool)
func (_Medcon *MedconCaller) IsPatient(opts *bind.CallOpts, username string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Medcon.contract.Call(opts, out, "isPatient", username)
	return *ret0, err
}

// IsPatient is a free data retrieval call binding the contract method 0xb6630c0d.
//
// Solidity: function isPatient(username string) constant returns(res bool)
func (_Medcon *MedconSession) IsPatient(username string) (bool, error) {
	return _Medcon.Contract.IsPatient(&_Medcon.CallOpts, username)
}

// IsPatient is a free data retrieval call binding the contract method 0xb6630c0d.
//
// Solidity: function isPatient(username string) constant returns(res bool)
func (_Medcon *MedconCallerSession) IsPatient(username string) (bool, error) {
	return _Medcon.Contract.IsPatient(&_Medcon.CallOpts, username)
}

// IsPharma is a free data retrieval call binding the contract method 0x7dd22a15.
//
// Solidity: function isPharma(username string) constant returns(res bool)
func (_Medcon *MedconCaller) IsPharma(opts *bind.CallOpts, username string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Medcon.contract.Call(opts, out, "isPharma", username)
	return *ret0, err
}

// IsPharma is a free data retrieval call binding the contract method 0x7dd22a15.
//
// Solidity: function isPharma(username string) constant returns(res bool)
func (_Medcon *MedconSession) IsPharma(username string) (bool, error) {
	return _Medcon.Contract.IsPharma(&_Medcon.CallOpts, username)
}

// IsPharma is a free data retrieval call binding the contract method 0x7dd22a15.
//
// Solidity: function isPharma(username string) constant returns(res bool)
func (_Medcon *MedconCallerSession) IsPharma(username string) (bool, error) {
	return _Medcon.Contract.IsPharma(&_Medcon.CallOpts, username)
}

// ShowMedOrderByDoctor is a free data retrieval call binding the contract method 0x41b53c88.
//
// Solidity: function showMedOrderByDoctor(patient string, doctor string, index uint64) constant returns(string, string, uint64, uint64, string, bool, string)
func (_Medcon *MedconCaller) ShowMedOrderByDoctor(opts *bind.CallOpts, patient string, doctor string, index uint64) (string, string, uint64, uint64, string, bool, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
		ret2 = new(uint64)
		ret3 = new(uint64)
		ret4 = new(string)
		ret5 = new(bool)
		ret6 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
		ret6,
	}
	err := _Medcon.contract.Call(opts, out, "showMedOrderByDoctor", patient, doctor, index)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, *ret6, err
}

// ShowMedOrderByDoctor is a free data retrieval call binding the contract method 0x41b53c88.
//
// Solidity: function showMedOrderByDoctor(patient string, doctor string, index uint64) constant returns(string, string, uint64, uint64, string, bool, string)
func (_Medcon *MedconSession) ShowMedOrderByDoctor(patient string, doctor string, index uint64) (string, string, uint64, uint64, string, bool, string, error) {
	return _Medcon.Contract.ShowMedOrderByDoctor(&_Medcon.CallOpts, patient, doctor, index)
}

// ShowMedOrderByDoctor is a free data retrieval call binding the contract method 0x41b53c88.
//
// Solidity: function showMedOrderByDoctor(patient string, doctor string, index uint64) constant returns(string, string, uint64, uint64, string, bool, string)
func (_Medcon *MedconCallerSession) ShowMedOrderByDoctor(patient string, doctor string, index uint64) (string, string, uint64, uint64, string, bool, string, error) {
	return _Medcon.Contract.ShowMedOrderByDoctor(&_Medcon.CallOpts, patient, doctor, index)
}

// ShowMedOrderByIndex is a free data retrieval call binding the contract method 0x7ff0539c.
//
// Solidity: function showMedOrderByIndex(patient string, pres uint64, index uint64) constant returns(string, string, uint64, uint64, string, bool, string)
func (_Medcon *MedconCaller) ShowMedOrderByIndex(opts *bind.CallOpts, patient string, pres uint64, index uint64) (string, string, uint64, uint64, string, bool, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
		ret2 = new(uint64)
		ret3 = new(uint64)
		ret4 = new(string)
		ret5 = new(bool)
		ret6 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
		ret6,
	}
	err := _Medcon.contract.Call(opts, out, "showMedOrderByIndex", patient, pres, index)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, *ret6, err
}

// ShowMedOrderByIndex is a free data retrieval call binding the contract method 0x7ff0539c.
//
// Solidity: function showMedOrderByIndex(patient string, pres uint64, index uint64) constant returns(string, string, uint64, uint64, string, bool, string)
func (_Medcon *MedconSession) ShowMedOrderByIndex(patient string, pres uint64, index uint64) (string, string, uint64, uint64, string, bool, string, error) {
	return _Medcon.Contract.ShowMedOrderByIndex(&_Medcon.CallOpts, patient, pres, index)
}

// ShowMedOrderByIndex is a free data retrieval call binding the contract method 0x7ff0539c.
//
// Solidity: function showMedOrderByIndex(patient string, pres uint64, index uint64) constant returns(string, string, uint64, uint64, string, bool, string)
func (_Medcon *MedconCallerSession) ShowMedOrderByIndex(patient string, pres uint64, index uint64) (string, string, uint64, uint64, string, bool, string, error) {
	return _Medcon.Contract.ShowMedOrderByIndex(&_Medcon.CallOpts, patient, pres, index)
}

// ShowNumOfMedOrdersByDoc is a free data retrieval call binding the contract method 0x6196d53b.
//
// Solidity: function showNumOfMedOrdersByDoc(patient string, doctor string) constant returns(uint64)
func (_Medcon *MedconCaller) ShowNumOfMedOrdersByDoc(opts *bind.CallOpts, patient string, doctor string) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Medcon.contract.Call(opts, out, "showNumOfMedOrdersByDoc", patient, doctor)
	return *ret0, err
}

// ShowNumOfMedOrdersByDoc is a free data retrieval call binding the contract method 0x6196d53b.
//
// Solidity: function showNumOfMedOrdersByDoc(patient string, doctor string) constant returns(uint64)
func (_Medcon *MedconSession) ShowNumOfMedOrdersByDoc(patient string, doctor string) (uint64, error) {
	return _Medcon.Contract.ShowNumOfMedOrdersByDoc(&_Medcon.CallOpts, patient, doctor)
}

// ShowNumOfMedOrdersByDoc is a free data retrieval call binding the contract method 0x6196d53b.
//
// Solidity: function showNumOfMedOrdersByDoc(patient string, doctor string) constant returns(uint64)
func (_Medcon *MedconCallerSession) ShowNumOfMedOrdersByDoc(patient string, doctor string) (uint64, error) {
	return _Medcon.Contract.ShowNumOfMedOrdersByDoc(&_Medcon.CallOpts, patient, doctor)
}

// ShowNumOfMedOrdersByIndex is a free data retrieval call binding the contract method 0x195451c8.
//
// Solidity: function showNumOfMedOrdersByIndex(patient string, indx uint64) constant returns(uint64)
func (_Medcon *MedconCaller) ShowNumOfMedOrdersByIndex(opts *bind.CallOpts, patient string, indx uint64) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Medcon.contract.Call(opts, out, "showNumOfMedOrdersByIndex", patient, indx)
	return *ret0, err
}

// ShowNumOfMedOrdersByIndex is a free data retrieval call binding the contract method 0x195451c8.
//
// Solidity: function showNumOfMedOrdersByIndex(patient string, indx uint64) constant returns(uint64)
func (_Medcon *MedconSession) ShowNumOfMedOrdersByIndex(patient string, indx uint64) (uint64, error) {
	return _Medcon.Contract.ShowNumOfMedOrdersByIndex(&_Medcon.CallOpts, patient, indx)
}

// ShowNumOfMedOrdersByIndex is a free data retrieval call binding the contract method 0x195451c8.
//
// Solidity: function showNumOfMedOrdersByIndex(patient string, indx uint64) constant returns(uint64)
func (_Medcon *MedconCallerSession) ShowNumOfMedOrdersByIndex(patient string, indx uint64) (uint64, error) {
	return _Medcon.Contract.ShowNumOfMedOrdersByIndex(&_Medcon.CallOpts, patient, indx)
}

// ShowNumOfPrescriptions is a free data retrieval call binding the contract method 0x632047c0.
//
// Solidity: function showNumOfPrescriptions(patient string) constant returns(uint64)
func (_Medcon *MedconCaller) ShowNumOfPrescriptions(opts *bind.CallOpts, patient string) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Medcon.contract.Call(opts, out, "showNumOfPrescriptions", patient)
	return *ret0, err
}

// ShowNumOfPrescriptions is a free data retrieval call binding the contract method 0x632047c0.
//
// Solidity: function showNumOfPrescriptions(patient string) constant returns(uint64)
func (_Medcon *MedconSession) ShowNumOfPrescriptions(patient string) (uint64, error) {
	return _Medcon.Contract.ShowNumOfPrescriptions(&_Medcon.CallOpts, patient)
}

// ShowNumOfPrescriptions is a free data retrieval call binding the contract method 0x632047c0.
//
// Solidity: function showNumOfPrescriptions(patient string) constant returns(uint64)
func (_Medcon *MedconCallerSession) ShowNumOfPrescriptions(patient string) (uint64, error) {
	return _Medcon.Contract.ShowNumOfPrescriptions(&_Medcon.CallOpts, patient)
}

// ShowPatientDetails is a free data retrieval call binding the contract method 0xd19bc23c.
//
// Solidity: function showPatientDetails(patient string) constant returns(string, string)
func (_Medcon *MedconCaller) ShowPatientDetails(opts *bind.CallOpts, patient string) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Medcon.contract.Call(opts, out, "showPatientDetails", patient)
	return *ret0, *ret1, err
}

// ShowPatientDetails is a free data retrieval call binding the contract method 0xd19bc23c.
//
// Solidity: function showPatientDetails(patient string) constant returns(string, string)
func (_Medcon *MedconSession) ShowPatientDetails(patient string) (string, string, error) {
	return _Medcon.Contract.ShowPatientDetails(&_Medcon.CallOpts, patient)
}

// ShowPatientDetails is a free data retrieval call binding the contract method 0xd19bc23c.
//
// Solidity: function showPatientDetails(patient string) constant returns(string, string)
func (_Medcon *MedconCallerSession) ShowPatientDetails(patient string) (string, string, error) {
	return _Medcon.Contract.ShowPatientDetails(&_Medcon.CallOpts, patient)
}

// AddDoctor is a paid mutator transaction binding the contract method 0xf790812d.
//
// Solidity: function addDoctor(username string, name string, password uint64, medical_id string) returns()
func (_Medcon *MedconTransactor) AddDoctor(opts *bind.TransactOpts, username string, name string, password uint64, medical_id string) (*types.Transaction, error) {
	return _Medcon.contract.Transact(opts, "addDoctor", username, name, password, medical_id)
}

// AddDoctor is a paid mutator transaction binding the contract method 0xf790812d.
//
// Solidity: function addDoctor(username string, name string, password uint64, medical_id string) returns()
func (_Medcon *MedconSession) AddDoctor(username string, name string, password uint64, medical_id string) (*types.Transaction, error) {
	return _Medcon.Contract.AddDoctor(&_Medcon.TransactOpts, username, name, password, medical_id)
}

// AddDoctor is a paid mutator transaction binding the contract method 0xf790812d.
//
// Solidity: function addDoctor(username string, name string, password uint64, medical_id string) returns()
func (_Medcon *MedconTransactorSession) AddDoctor(username string, name string, password uint64, medical_id string) (*types.Transaction, error) {
	return _Medcon.Contract.AddDoctor(&_Medcon.TransactOpts, username, name, password, medical_id)
}

// AddMedOrderToPatient is a paid mutator transaction binding the contract method 0x69348215.
//
// Solidity: function addMedOrderToPatient(patient string, med_name string, dose_per_day uint64, no_of_days uint64, doctor string, diagnosis string) returns()
func (_Medcon *MedconTransactor) AddMedOrderToPatient(opts *bind.TransactOpts, patient string, med_name string, dose_per_day uint64, no_of_days uint64, doctor string, diagnosis string) (*types.Transaction, error) {
	return _Medcon.contract.Transact(opts, "addMedOrderToPatient", patient, med_name, dose_per_day, no_of_days, doctor, diagnosis)
}

// AddMedOrderToPatient is a paid mutator transaction binding the contract method 0x69348215.
//
// Solidity: function addMedOrderToPatient(patient string, med_name string, dose_per_day uint64, no_of_days uint64, doctor string, diagnosis string) returns()
func (_Medcon *MedconSession) AddMedOrderToPatient(patient string, med_name string, dose_per_day uint64, no_of_days uint64, doctor string, diagnosis string) (*types.Transaction, error) {
	return _Medcon.Contract.AddMedOrderToPatient(&_Medcon.TransactOpts, patient, med_name, dose_per_day, no_of_days, doctor, diagnosis)
}

// AddMedOrderToPatient is a paid mutator transaction binding the contract method 0x69348215.
//
// Solidity: function addMedOrderToPatient(patient string, med_name string, dose_per_day uint64, no_of_days uint64, doctor string, diagnosis string) returns()
func (_Medcon *MedconTransactorSession) AddMedOrderToPatient(patient string, med_name string, dose_per_day uint64, no_of_days uint64, doctor string, diagnosis string) (*types.Transaction, error) {
	return _Medcon.Contract.AddMedOrderToPatient(&_Medcon.TransactOpts, patient, med_name, dose_per_day, no_of_days, doctor, diagnosis)
}

// AddPatient is a paid mutator transaction binding the contract method 0xd31a1dfc.
//
// Solidity: function addPatient(username string, name string, password uint64) returns()
func (_Medcon *MedconTransactor) AddPatient(opts *bind.TransactOpts, username string, name string, password uint64) (*types.Transaction, error) {
	return _Medcon.contract.Transact(opts, "addPatient", username, name, password)
}

// AddPatient is a paid mutator transaction binding the contract method 0xd31a1dfc.
//
// Solidity: function addPatient(username string, name string, password uint64) returns()
func (_Medcon *MedconSession) AddPatient(username string, name string, password uint64) (*types.Transaction, error) {
	return _Medcon.Contract.AddPatient(&_Medcon.TransactOpts, username, name, password)
}

// AddPatient is a paid mutator transaction binding the contract method 0xd31a1dfc.
//
// Solidity: function addPatient(username string, name string, password uint64) returns()
func (_Medcon *MedconTransactorSession) AddPatient(username string, name string, password uint64) (*types.Transaction, error) {
	return _Medcon.Contract.AddPatient(&_Medcon.TransactOpts, username, name, password)
}

// AddPharma is a paid mutator transaction binding the contract method 0x774b4a37.
//
// Solidity: function addPharma(username string, name string, password uint64, pharma_id string) returns()
func (_Medcon *MedconTransactor) AddPharma(opts *bind.TransactOpts, username string, name string, password uint64, pharma_id string) (*types.Transaction, error) {
	return _Medcon.contract.Transact(opts, "addPharma", username, name, password, pharma_id)
}

// AddPharma is a paid mutator transaction binding the contract method 0x774b4a37.
//
// Solidity: function addPharma(username string, name string, password uint64, pharma_id string) returns()
func (_Medcon *MedconSession) AddPharma(username string, name string, password uint64, pharma_id string) (*types.Transaction, error) {
	return _Medcon.Contract.AddPharma(&_Medcon.TransactOpts, username, name, password, pharma_id)
}

// AddPharma is a paid mutator transaction binding the contract method 0x774b4a37.
//
// Solidity: function addPharma(username string, name string, password uint64, pharma_id string) returns()
func (_Medcon *MedconTransactorSession) AddPharma(username string, name string, password uint64, pharma_id string) (*types.Transaction, error) {
	return _Medcon.Contract.AddPharma(&_Medcon.TransactOpts, username, name, password, pharma_id)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Medcon *MedconTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Medcon.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Medcon *MedconSession) Kill() (*types.Transaction, error) {
	return _Medcon.Contract.Kill(&_Medcon.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Medcon *MedconTransactorSession) Kill() (*types.Transaction, error) {
	return _Medcon.Contract.Kill(&_Medcon.TransactOpts)
}

// MarkMedOrderAsMet is a paid mutator transaction binding the contract method 0x5d37ec16.
//
// Solidity: function markMedOrderAsMet(patient string, doctor string, pharma string, index uint64) returns()
func (_Medcon *MedconTransactor) MarkMedOrderAsMet(opts *bind.TransactOpts, patient string, doctor string, pharma string, index uint64) (*types.Transaction, error) {
	return _Medcon.contract.Transact(opts, "markMedOrderAsMet", patient, doctor, pharma, index)
}

// MarkMedOrderAsMet is a paid mutator transaction binding the contract method 0x5d37ec16.
//
// Solidity: function markMedOrderAsMet(patient string, doctor string, pharma string, index uint64) returns()
func (_Medcon *MedconSession) MarkMedOrderAsMet(patient string, doctor string, pharma string, index uint64) (*types.Transaction, error) {
	return _Medcon.Contract.MarkMedOrderAsMet(&_Medcon.TransactOpts, patient, doctor, pharma, index)
}

// MarkMedOrderAsMet is a paid mutator transaction binding the contract method 0x5d37ec16.
//
// Solidity: function markMedOrderAsMet(patient string, doctor string, pharma string, index uint64) returns()
func (_Medcon *MedconTransactorSession) MarkMedOrderAsMet(patient string, doctor string, pharma string, index uint64) (*types.Transaction, error) {
	return _Medcon.Contract.MarkMedOrderAsMet(&_Medcon.TransactOpts, patient, doctor, pharma, index)
}

// MortalABI is the input ABI used to generate the binding from.
const MortalABI = "[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"

// MortalBin is the compiled bytecode used for deploying new contracts.
const MortalBin = `0x6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a031990911617905560c18061003a6000396000f300606060405260043610603e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b581146043575b600080fd5b3415604d57600080fd5b60536055565b005b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116141560935760005473ffffffffffffffffffffffffffffffffffffffff16ff5b5600a165627a7a723058204f817ef12e626361e73bee746f9aea1a5707621063308f1f1d3616a22e537c430029`

// DeployMortal deploys a new Ethereum contract, binding an instance of Mortal to it.
func DeployMortal(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Mortal, error) {
	parsed, err := abi.JSON(strings.NewReader(MortalABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MortalBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Mortal{MortalCaller: MortalCaller{contract: contract}, MortalTransactor: MortalTransactor{contract: contract}}, nil
}

// Mortal is an auto generated Go binding around an Ethereum contract.
type Mortal struct {
	MortalCaller     // Read-only binding to the contract
	MortalTransactor // Write-only binding to the contract
}

// MortalCaller is an auto generated read-only Go binding around an Ethereum contract.
type MortalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MortalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MortalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MortalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MortalSession struct {
	Contract     *Mortal           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MortalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MortalCallerSession struct {
	Contract *MortalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MortalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MortalTransactorSession struct {
	Contract     *MortalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MortalRaw is an auto generated low-level Go binding around an Ethereum contract.
type MortalRaw struct {
	Contract *Mortal // Generic contract binding to access the raw methods on
}

// MortalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MortalCallerRaw struct {
	Contract *MortalCaller // Generic read-only contract binding to access the raw methods on
}

// MortalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MortalTransactorRaw struct {
	Contract *MortalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMortal creates a new instance of Mortal, bound to a specific deployed contract.
func NewMortal(address common.Address, backend bind.ContractBackend) (*Mortal, error) {
	contract, err := bindMortal(address, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Mortal{MortalCaller: MortalCaller{contract: contract}, MortalTransactor: MortalTransactor{contract: contract}}, nil
}

// NewMortalCaller creates a new read-only instance of Mortal, bound to a specific deployed contract.
func NewMortalCaller(address common.Address, caller bind.ContractCaller) (*MortalCaller, error) {
	contract, err := bindMortal(address, caller, nil)
	if err != nil {
		return nil, err
	}
	return &MortalCaller{contract: contract}, nil
}

// NewMortalTransactor creates a new write-only instance of Mortal, bound to a specific deployed contract.
func NewMortalTransactor(address common.Address, transactor bind.ContractTransactor) (*MortalTransactor, error) {
	contract, err := bindMortal(address, nil, transactor)
	if err != nil {
		return nil, err
	}
	return &MortalTransactor{contract: contract}, nil
}

// bindMortal binds a generic wrapper to an already deployed contract.
func bindMortal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MortalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mortal *MortalRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Mortal.Contract.MortalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mortal *MortalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mortal.Contract.MortalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mortal *MortalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mortal.Contract.MortalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mortal *MortalCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Mortal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mortal *MortalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mortal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mortal *MortalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mortal.Contract.contract.Transact(opts, method, params...)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Mortal *MortalTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mortal.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Mortal *MortalSession) Kill() (*types.Transaction, error) {
	return _Mortal.Contract.Kill(&_Mortal.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Mortal *MortalTransactorSession) Kill() (*types.Transaction, error) {
	return _Mortal.Contract.Kill(&_Mortal.TransactOpts)
}
